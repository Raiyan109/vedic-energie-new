    // const [isOpenState, setIsOpenState] = useState(false)
    // const [isOpenDistrict, setIsOpenDistrict] = useState(false)
    // const [isOpenCity, setIsOpenCity] = useState(false)
    // const [inputValueState, setInputValueState] = useState('')
    // const [inputValueDistrict, setInputValueDistrict] = useState('')
    // const [inputValueCity, setInputValueCity] = useState('')
    // const [selectedState, setSelectedState] = useState('')
    // const [selectedDistrict, setSelectedDistrict] = useState('')
    // const [selectedCity, setSelectedCity] = useState('')
 
 {/* <div className='w-full h-8 font-medium z-10'> */}
                                {/* <div
                                        onClick={() => setIsOpenState(!isOpenState)}
                                        className='w-full mt-8 flex items-center justify-start border-b-2 text-lightYellow'>
                                        {selectedState
                                            ? selectedState
                                            : 'State'}
                                    </div> */}
                                {/* <ul className={`bg-lightYellow mt-2 overflow-y-auto text-black ${isOpenState ? 'max-h-60' : 'max-h-0'}`}> */}

                                {/* input field */}
                                {/* <div className='flex items-center px-2 sticky top-0 bg-lightYellow'>
                                            <AiOutlineSearch size={18} className='' />
                                            <input
                                                type="text"
                                                value={inputValueState}
                                                onChange={(e) => setInputValueState(e.target.value.toLowerCase())}
                                                placeholder='Enter state name'
                                                className='bg-lightYellow p-2 outline-none focus:outline-none focus:ring focus:ring-lightYellow border-none'
                                            />
                                        </div> */}
                                {/* {statesData.map((item, index) => (
                                            <li
                                                key={index}
                                                className={`p-2 text-sm cursor-pointer hover:bg-yellow hover:text-black 
                                                ${item.state_name.toLowerCase() === selectedState.toLowerCase() && 'bg-yellow text-black'}
                                                ${item.state_name.toLowerCase().startsWith(inputValueState) ? 'block'
                                                        :
                                                        'hidden'
                                                    }`}
                                                onClick={() => {
                                                    if (item.state_name.toLowerCase() !== selectedState.toLowerCase()) {
                                                        setSelectedState(item.state_name)
                                                        setIsOpenState(false)
                                                        setInputValueState('')
                                                    }
                                                }}
                                            >
                                                {item.state_name}
                                            </li>
                                        ))} */}
                                {/* </ul>
                                </div> */}

                                {/*  */}

                                {/* new dropdown - DISTRICT */}

                                {/* <div className='w-full h-8 font-medium z-10'> */}
                                {/* <div
                                        onClick={() => setIsOpenDistrict(!isOpenDistrict)}
                                        className='w-full mt-8 flex items-center justify-start border-b-2 text-lightYellow'>
                                        {selectedDistrict
                                            ? selectedDistrict
                                            : 'District'}
                                    </div> */}
                                {/* <ul className={`bg-lightYellow mt-2 overflow-y-auto text-black ${isOpenDistrict ? 'max-h-60' : 'max-h-0'}`}> */}

                                {/* input field */}
                                {/* <div className='flex items-center px-2 sticky top-0 bg-lightYellow'>
                                            <AiOutlineSearch size={18} className='' />
                                            <input
                                                type="text"
                                                value={inputValueDistrict}
                                                onChange={(e) => setInputValueDistrict(e.target.value.toLowerCase())}
                                                placeholder='Enter state name'
                                                className='bg-lightYellow p-2 outline-none focus:outline-none focus:ring focus:ring-lightYellow border-none'
                                            />
                                        </div> */}
                                {/* {districts.map((item, index) => (
                                            <li
                                                key={index}
                                                className={`p-2 text-sm cursor-pointer hover:bg-yellow hover:text-black 
                                                ${item.name.toLowerCase() === selectedDistrict.toLowerCase() && 'bg-yellow text-black'}
                                                ${item.name.toLowerCase().startsWith(inputValueDistrict) ? 'block'
                                                        :
                                                        'hidden'
                                                    }`}
                                                onClick={() => {
                                                    if (item.name.toLowerCase() !== selectedDistrict.toLowerCase()) {
                                                        setSelectedDistrict(item.name)
                                                        setIsOpenDistrict(false)
                                                        setInputValueDistrict('')
                                                    }
                                                }}
                                            >
                                                {item.name}
                                            </li>
                                        ))} */}
                                {/* </ul>
                                </div> */}

                                {/*  */}

                                {/* new dropdown - CITY */}

                                {/* <div className='w-full h-8 font-medium z-10'> */}
                                {/* <div
                                        onClick={() => setIsOpenCity(!isOpenCity)}
                                        className='w-full mt-8 flex items-center justify-start border-b-2 text-lightYellow'>
                                        {selectedCity
                                            ? selectedCity
                                            : 'City'}
                                    </div> */}
                                {/* <ul className={`bg-lightYellow mt-2 overflow-y-auto text-black ${isOpenCity ? 'max-h-60' : 'max-h-0'}`}> */}

                                {/* input field */}
                                {/* <div className='flex items-center px-2 sticky top-0 bg-lightYellow'>
                                            <AiOutlineSearch size={18} className='' />
                                            <input
                                                type="text"
                                                value={inputValueCity}
                                                onChange={(e) => setInputValueCity(e.target.value.toLowerCase())}
                                                placeholder='Enter state name'
                                                className='bg-lightYellow p-2 outline-none focus:outline-none focus:ring focus:ring-lightYellow border-none'
                                            />
                                        </div> */}
                                {/* {cities.map((item, index) => (
                                            <li
                                                key={index}
                                                className={`p-2 text-sm cursor-pointer hover:bg-yellow hover:text-black 
                                                ${item.name.toLowerCase() === selectedCity.toLowerCase() && 'bg-yellow text-black'}
                                                ${item.name.toLowerCase().startsWith(inputValueCity) ? 'block'
                                                        :
                                                        'hidden'
                                                    }`}
                                                onClick={() => {
                                                    if (item.name.toLowerCase() !== selectedCity.toLowerCase()) {
                                                        setSelectedCity(item.name)
                                                        setIsOpenCity(false)
                                                        setInputValueCity('')
                                                    }
                                                }}
                                            >
                                                {item.name}
                                            </li>
                                        ))} */}
                                {/* </ul>
                                </div> */}

                                {/*  */}


                                
                                {/* <div className='relative block border-b border-green pt-6 focus-within:border-blue'>
                                    <button
                                        className='text-lightYellow'
                                        onClick={() => setIsOpen((prev) => !prev)}
                                    >Dropdown</button>

                                    {isOpen && (
                                        <div className='absolute bg-lightYellow top-[50px] flex flex-col items-start rounded-lg p-2 w-full z-10 max-h-60 overflow-y-auto'>
                                            {states.map((item, index) => (
                                                <div className='cursor-pointer hover:bg-orange hover:text-black hover:w-full rounded-lg p-1' key={index}>
                                                    <h3>{item.state}</h3>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div> */}



                                // Another switch
//                                 import React from 'react';
// import styled from 'styled-components';

// const WinterSwitch = () => {
//     const Section = styled.div`
//     input:checked {
//         background-color: #22c55e; /* bg-green-500 */
//       }
    
//       input:checked ~ span:last-child {
//         --tw-translate-x: 1.75rem; /* translate-x-7 */
//       }
//     `

//     return (
//         <Section>
//             <label className="flex items-center relative w-max cursor-pointer select-none">

//                 <input type="checkbox" className="appearance-none transition-colors cursor-pointer w-14 h-7 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-black focus:ring-blue bg-yellow" />
//                 <span className="absolute font-medium text-xs uppercase right-1 text-white"> OFF </span>
//                 <span className="absolute font-medium text-xs uppercase right-8 text-white"> ON </span>
//                 <span className="w-7 h-7 right-7 absolute rounded-full transform transition-transform bg-gray" />
//             </label>
//         </Section>
//     );
// };

// export default WinterSwitch;



// TABLE
// <div className="text-sm mt-12 overflow-x-auto">
//                     <ul rol="tablist" className="w-full border-b flex items-center justify-center gap-x-3 overflow-x-auto">
//                         {
//                             tableItems.map((item, idx) => (
//                                 <li
//                                     key={idx}
//                                     className={`py-2 border-b-2 rounded-md w-44 text-center mb-10 ${selectedItem == idx
//                                         ? "border-indigo-600 text-[#F0EFFF] bg-blue" : "border-white text-blue bg-[#F0EFFF]"}`}>
//                                     <button
//                                         role="tab"
//                                         aria-selected={selectedItem == idx ? true : false}
//                                         aria-controls={`tabpanel-${idx + 1}`}
//                                         className="py-2.5 px-4 rounded-lg duration-150 hover:text-indigo-600 hover:bg-gray-50 active:bg-gray-100 font-medium"
//                                         onClick={() => setSelectedItem(idx)}
//                                     >
//                                         {item.label}
//                                     </button>
//                                 </li>
//                             ))
//                         }
//                     </ul>

//                     <table className="w-full table-auto text-left border-separate border-spacing-y-3">
//                         <thead className="text-blue uppercase font-medium bg-lightYellow">
//                             <tr>
//                                 <th className="py-4 pr-6 pl-5">{tableItems[selectedItem].title}</th>
//                                 <th className="py-4 pr-6">Status</th>
//                                 <th className="py-4 pr-6">Watts</th>
//                                 <th className="py-4 pr-6">CONSUMPTION TIME</th>
//                                 <th className="py-4 pr-6">ASSUMPTIONS</th>
//                             </tr>
//                         </thead>
//                         <tbody className="text-blue py-3">
//                             {
//                                 tableItems[selectedItem].items.map((item, idx) => (
//                                     <tr key={idx} className='odd:bg-gray even:bg-lightGray'>
//                                         <td className="pr-6 pl-5  whitespace-nowrap font-semibold">{item.name}</td>
//                                         <td className="pr-6  whitespace-nowrap">{item.status}</td>
//                                         <td className="pr-6  whitespace-nowrap">
//                                             <span className='py-2 px-3 rounded-full font-semibold text-xs'>{item.watt}</span>
//                                         </td>
//                                         <td className="pr-6  whitespace-nowrap">{item.consumption}</td>
//                                         <td className="pr-6  whitespace-nowrap">{item.assumptions}</td>
//                                     </tr>
//                                 ))
//                             }
//                         </tbody>
//                     </table>

//                     {/* Custom Machines Section */}
//                     <div className="lg:max-w-none max-w-xl mt-8 py-6">
//                         <h3 className="text-blue lg:text-2xl font-bold text-xl">
//                             If You Want To Add Other Machines You Can Customize It Here
//                         </h3>
//                     </div>

//                     <div className='grid lg:grid-cols-2 md:grid-cols-2 grid-cols-1 gap-4'>
//                         <table className="lg:w-1/3 table-auto text-left border-separate border-spacing-y-3">

//                             <tbody className="text-blue py-3">
//                                 {
//                                     customTableItems.map((item, idx) => (
//                                         <tr key={idx} className='odd:bg-gray even:bg-lightGray'>
//                                             <td className="pr-6 pl-5  whitespace-nowrap font-semibold">{item.name}</td>
//                                             <td className="pr-6  whitespace-nowrap">{item.status}</td>
//                                         </tr>
//                                     ))
//                                 }
//                             </tbody>
//                         </table>

//                         <AddButton text='Add' />
//                     </div>
//                 </div>



// gauge screen
  {/* <div className='flex justify-center items-center'>

                        <div className='max-w-md rounded-2xl text-[#1A2421] backdrop-blur-lg [ p-2 md:p-10 lg:p-10 ] [ bg-gradient-to-b from-white/60 to-white/30 ]
                            [ border-[1px] border-solid border-white border-opacity-30 ]   [ shadow-black/70 shadow-2xl ] mt-10'>
                            <h1 className='text-xl font-semibold text-lightgreen text-center uppercase mb-10'>{message}</h1>
                            <p className='mb-6'>Per Capita Consumption data : <span className='text-orange font-bold'>
                                {avgConsumptionData.data}</span></p>
                            <p className=''>Your Consumption data : <span className='text-orange font-bold'>
                                {result}</span></p>
                        </div>
                    </div> */}